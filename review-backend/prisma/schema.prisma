generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(100)
  email            String        @unique
  password         String        @db.VarChar(255)
  contact          String?       @db.VarChar(15)
  dob              DateTime?
  gender           String?       @db.VarChar(10)
  address          String?
  createdAt        DateTime      @default(now())
  city             String?
  facebook         String?
  instagram        String?
  state            String?
  twitter          String?
  // Reviews made by this user
  reviews         Review[] @relation("ReviewAuthor")
  // Reviews received by this user
  reviewsReceived Review[] @relation("ReviewTarget")
  // Messages
  sentMessages     ChatMessage[] @relation("MessageSender")
  receivedMessages ChatMessage[] @relation("MessageRecipient")
  // Likes
  likedReviews     ReviewLike[]
}

model Review {
  id           Int           @id @default(autoincrement())
  rating       Int
  createdAt    DateTime      @default(now())
  // Author of the review
  author       User          @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId     Int
  // Target user being reviewed
  target       User          @relation("ReviewTarget", fields: [targetId], references: [id])
  targetId     Int
  content      String
  entity       String        @db.VarChar(255)
  imageUrl     String?
  review       String
  tags         String[]
  title        String        @db.VarChar(255)
  videoUrl     String?
  chatMessages ChatMessage[]
  likes        ReviewLike[]

  @@index([authorId])
  @@index([targetId])
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  reviewId  Int
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  reviewId    Int?
  senderId    Int
  content     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  recipientId Int
  isReply     Boolean  @default(false)
  updatedAt   DateTime @default(now()) @updatedAt
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  review      Review?   @relation(fields: [reviewId], references: [id])
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
}
